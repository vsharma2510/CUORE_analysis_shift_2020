#include <iostream>
#include <fstream>
#include <getopt.h>
#include <vector>
#include <string>
#include <sstream>
#include <ostream>
#include <iomanip>
#include <cstdlib>

#include <TH2.h>
#include <TROOT.h>
#include <TCanvas.h>
#include <TString.h>
#include <TFile.h>
#include <TLegend.h>
#include <TF1.h>
#include <TGraphErrors.h>
#include <TGraphAsymmErrors.h>
#include <TPad.h>


#include "QCuore.hh"
#include "QError.hh"
#include "QObject.hh"
#include "QGlobalHandle.hh"
#include "QMessage.hh"
#include "QGlobalDataManager.hh"
#include "QDetChannelCollectionHandle.hh"
#include "QDetChannelCollection.hh"
#include "QHeader.hh"
#include "QPulseInfo.hh"
#include "QChain.hh"
#include "QTObject.hh"
#include "QTObjectHandle.hh"

using namespace std;
using namespace Cuore;

int main(int argc, char* argv[]){

  int channel=17;
  int tower=1;
  int run_number [14];
  run_number[0]=303396;
  run_number[1]=303398;
  run_number[2]=303399;
  run_number[3]=303400;
  run_number[4]=303406;
  run_number[5]=303408;
  run_number[6]=303409;
  run_number[7]=303410;
  run_number[8]=303411;
  run_number[9]=303413;
  run_number[10]=303414;
  run_number[11]=303415;
  run_number[12]=303416;
  run_number[13]=303417;

  TString listname;
  QChain ch("qtree");
  TString cut_baseline,cut_heater;

  for(int i=0;i<4;i++){
    if(run_number[i]<303401){
      listname.Form("/nfs/cuore_ssd/scratch/vsharma/diana_ds3090_official/output/ds3090/Production_%d_%.3d_C.list",run_number[i],tower);
    }
    if(run_number[i]>303401){
       listname.Form("/nfs/cuore_ssd/scratch/vsharma/diana_ds3090_official/output/ds3090/Production_%d_%.3d_B.list",run_number[i],tower);
    }

    int nAdded=ch.Add(listname.Data());
    if(nAdded==0){cout<<"Failed to add list file for run "<<run_number<<" and channel "<<channel<<endl;}
  }
  
  cut_baseline.Form("Channel==%d && IsPulser",channel); //IsSignal?
  cut_heater.Form("Channel==%d && IsPulser",channel);
  
  unsigned int sizeArr1=ch.Draw("Baseline:OF_Amplitude",cut_baseline.Data(),"GOFF");
  
  double* baseline = ch.GetV1();
  double* amplitude = ch.GetV2();
  double* Baseline = new double [sizeArr1];
  double* Amplitude = new double [sizeArr1];
  
  cout<<"BASELINE VS AMPLITUDE"<<endl;

  for(int i=0;i<sizeArr1;i++){
    Baseline[i]=baseline[i];
    Amplitude[i]=amplitude[i];
    if(i%10==0){cout<<Baseline[i]<<"   "<<Amplitude[i]<<endl;}
  }
  
  cout<<"Data copy finished"<<endl;
  
  TH2D* h_baseline = new TH2D("h_baseline","Baseline vs Amplitude",10000,0,-10000,5000,0,5000); 
  //h_baseline->FillN(sizeArr1,Baseline,0,Amplitude,1);
  for(int i=0;i<sizeArr1;i++){
    h_baseline->Fill(Baseline[i],Amplitude[i]);
  }
  TCanvas* c1 = new TCanvas("c1","Baseline vs Amplitude",800,600);
  c1->cd();
  h_baseline->Draw();
  c1->SaveAs("test_baseline.pdf");
  
  unsigned int sizeArr2=ch.Draw("StabAmplitude_heaterTGS",cut_heater.Data(),"GOFF");

  double* heater_amp = ch.GetV1();
  double* Heater_amp = new double [sizeArr2];

  cout<<"HEATER AMPLITUDES"<<endl;

  for(int i=0;i<sizeArr2;i++){
    Heater_amp[i]=heater_amp[i];
    if(i%10==0){cout<<Heater_amp[i]<<endl;}
  }
    
  cout<<"Data copy finished"<<endl;

  TH1D* h_heater = new TH1D("h_heater","Heater Amplitude",100,0,10000);
  for(int i=0;i<sizeArr2;i++){
    h_heater->Fill(Heater_amp[i]);
  }
  h_heater->Draw();
  c1->SaveAs("test_heater.pdf");

  return 0;
}
